@inject IJSRuntime js
@implements IDisposable

@{
    string isSelected = IsSelected ? "selected" : "";
}

<div class="file @isSelected" @onclick="OnClickHandler">
    <div class="icon">
        @((MarkupString)GetFileIcon())
        @if (!string.IsNullOrEmpty(Status))
        {
            <div class="status"> @Status </div>
        }
        else if (File.Progress is not null)
        {
            <div class="progress"> @($"{Progress}%") </div>
        }
    </div>
    <div class="info" @ref=ElementInfo>
        <div class="file-name" @ref=ElementName>
            @Path.GetFileName(File.Path)
        </div>
        <div class="file-path" @ref=ElementPath>
            @Path.GetDirectoryName(File.Path)
        </div>
    </div>
</div>

@code {
    [Parameter]
    public FileModel File { get; set; }

    [Parameter]
    public EventCallback<FileModel> OnClick { get; set; }

    public bool IsSelected { get; set; }

    public long Progress { get; set; }

    public string? Status { get; set; }

    IJSObjectReference jsModule = null!;

    ElementReference ElementName;
    ElementReference ElementPath;
    ElementReference ElementInfo;

    protected override void OnInitialized()
    {
        if (File?.Progress is not null)
        {
            File.Progress.ProgressChanged += OnProgressChanged;
        }

        if (!System.IO.File.Exists(File?.Path))
        {
            Progress = -1;
            Status = "Deleted";
        }
        else if (File is not null && new FileInfo(File.Path).Length == File.Size)
        {
            Progress = 100;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsModule = await js.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/Items/FileComponent.razor.js");
            await jsModule.InvokeVoidAsync("FileComponent.Init", ElementInfo, ElementName, ElementPath);
        }
    }

    private void OnProgressChanged(object? sender, long progress)
    {
        long percent = (long)(progress * 100 / File.Size);
        if (Progress != percent)
        {
            Progress = percent;
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnClickHandler()
    {
        if (OnClick.HasDelegate)
        {
            IsSelected = !IsSelected;
            await OnClick.InvokeAsync(File);
        }
    }

    private string GetFileIcon()
    {
        // useful repository with file extensions
        // https://github.com/dyne/file-extension-list

        return Path.GetExtension(File.Path)?.Trim('.')?.ToLower() switch
        {
            // text formats
            "pdf" => "<i class=\"ph ph-file-pdf\"></i>",
            "docx" or
            "doc" => "<i class=\"ph ph-file-doc\"></i>",
            "csv" => "<i class=\"ph ph-file-csv\"></i>",

            "ebook" or
            "log" or
            "msg" or
            "odt" or
            "org" or
            "pages" or
            "pdf" or
            "rtf" or
            "rst" or
            "tex" or
            "txt" or
            "wpd" or
            "wps" or
            "md" => "<i class=\"ph ph-file-text\"></i>",
            // code
            "css" => "<i class=\"ph ph-file-css\"></i>",
            "html" => "<i class=\"ph ph-file-html\"></i>",
            "js" => "<i class=\"ph ph-file-js\"></i>",
            "jsx" => "<i class=\"ph ph-file-jsx\"></i>",
            "rs" => "<i class=\"ph ph-file-rs\"></i>",
            "sql" => "<i class=\"ph ph-file-sql\"></i>",
            "ts" => "<i class=\"ph ph-file-ts\"></i>",
            "vue" => "<i class=\"ph ph-file-vue\"></i>",

            "c" or
            "h" or
            "hpp" or
            "sh" or
            "bash" or
            "zsh" or
            "ps1" or
            "rb" or
            "ada" or
            "adb" or
            "ads" or
            "asm" or
            "asp" or
            "aspx" or
            "bas" or
            "bat " or
            "c++" or
            "c" or
            "cbl" or
            "cc" or
            "class" or
            "clj" or
            "cob" or
            "cpp" or
            "cs" or
            "csh" or
            "cxx" or
            "d" or
            "diff" or
            "e" or
            "el" or
            "f" or
            "f77" or
            "f90" or
            "fish	" or
            "for" or
            "fth" or
            "ftn" or
            "go" or
            "groovy" or
            "h" or
            "hh" or
            "hpp" or
            "hs" or
            "htm" or
            "html" or
            "hxx" or
            "inc" or
            "java" or
            "js" or
            "json" or
            "jsp" or
            "jsx" or
            "ksh" or
            "kt" or
            "kts" or
            "lhs" or
            "lisp" or
            "lua" or
            "m" or
            "m4" or
            "nim" or
            "patch" or
            "php" or
            "php3" or
            "php4" or
            "php5" or
            "phtml" or
            "pl" or
            "po" or
            "pp" or
            "prql" or
            "py" or
            "r" or
            "rb" or
            "rs" or
            "s" or
            "scala" or
            "sh	" or
            "sql" or
            "swg" or
            "swift" or
            "v" or
            "vb" or
            "vcxproj" or
            "xcodeproj" or
            "xml" or
            "zig" or
            "zsh" or
            "cs" => "<i class=\"ph ph-file-code\"></i>",
            // images
            "png" => "<i class=\"ph ph-file-png\"></i>",
            "jpeg" or
            "jfif" or
            "pjpeg" or
            "pjp" or
            "jpg" => "<i class=\"ph ph-file-jpg\"></i>",
            "svg" => "<i class=\"ph ph-file-svg\"></i>",

            "bmp" or
            "apng" or
            "avif" or
            "gif" or
            "webp" or
            "ico" or
            "cur" or
            "raw" or
            "tif" or
            "tiff" => "<i class=\"ph ph-file-image\"></i>",
            // audio
            "wav" or
            "bwf" or
            "raw" or
            "aiff" or
            "flac" or
            "m4a" or
            "pac" or
            "tta" or
            "wv" or
            "ast" or
            "aac" or
            "mp2" or
            "mp3" or
            "amr" or
            "s3m" or
            "act" or
            "au" or
            "dct" or
            "dss" or
            "gsm" or
            "m4p" or
            "mmf" or
            "mpc" or
            "ogg" or
            "oga" or
            "opus" or
            "ra" or
            "sln" or
            "vox" => "<i class=\"ph ph-file-audio\"></i>",
            // video
            "webm" or
            "mkv" or
            "flv" or
            "vob" or
            "ogv" or
            "rrc" or
            "gifv" or
            "mng" or
            "mov" or
            "avi" or
            "qt" or
            "wmv" or
            "yuv" or
            "rm" or
            "asf" or
            "amv" or
            "mp4" or
            "m4v" or
            "mpg" or
            "mpeg" or
            "mpe" or
            "mpv" or
            "m4v" or
            "svi" or
            "3gp" or
            "3g2" or
            "mxf" or
            "roq" or
            "nsv" or
            "flv" or
            "f4v" or
            "f4p" or
            "f4a" or
            "f4b" or
            "mod" => "<i class=\"ph ph-file-video\"></i>",
            // archives
            "zip" => "<i class=\"ph ph-file-zip\"></i>",

            "7z" or
            "rar" or
            "tar" => "<i class=\"ph ph-file-archive\"></i>",
            // other
            "ppt" => "<i class=\"ph ph-file-ppt\"></i>",
            "xlsx" or
            "xls" => "<i class=\"ph ph-file-xls\"></i>",

            _ => "<i class=\"ph ph-file\"></i>"
        };
    }

    public void Dispose()
    {
        if (File?.Progress is not null)
        {
            File.Progress.ProgressChanged -= OnProgressChanged;
        };
    }
}
