@page "/local"
@using System.Net
@using System.Net.NetworkInformation
@using System.Net.Sockets
@using System.Text
@inject ILocalNetworkService lns
@inject INetworkInfoService nis
@inject IStorageService storage
@inject IJSRuntime js
@inject NavigationService NavigationService
@inject LocalTransferService TransferService
@implements IDisposable

<header class="header">
    <BadgeButton OnClick="@(() => NavigationService.NavigateTo("receivefiles"))"
                 Count="ReceivedFiles.Count">
        <i class="ph ph-download-simple"></i>
    </BadgeButton>
    <BadgeButton OnClick="@(() => NavigationService.NavigateTo("sendfiles"))"
                 Count="SendFiles.Count">
        <i class="ph ph-upload-simple"></i>
    </BadgeButton>
    <BadgeButton Class="left" OnClick="@(() => Listening ? StopListening() : StartListening())">
        @if (Listening)
        {
            <i class="ph ph-ear"></i>
        }
        else
        {
            <i class="ph ph-ear-slash"></i>
        }
    </BadgeButton>
</header>

<div class="main">
    <div class="container">
        <div class="top-panel">
            <select class="select" @bind="SelectedIp" @bind:after="IpChanged">
                @foreach (var ip in NetworkInterfaceIPs)
                {
                    <option value="@ip" selected="@(ip.ToString() == SelectedIp)">@ip.ToString()</option>
                }
            </select>
            <div class="refresh" @onclick="RefreshIps">
                <i class="ph ph-arrows-clockwise"></i>
            </div>
        </div>

        @if (Supported)
        {
            <div class="devices">
                <div class="devices-area">
                @foreach (var device in Devices)
                    {
                    <DeviceComponent Device="@device" SendCallback="StartSending"></DeviceComponent>
                    }
                </div>
            </div>
        }

        <div class="message">
            @if (NetworkInterfaceIPs.Count == 0)
            {
                @("Could not find interfaces with default gateway")
            }
            else if (!Supported)
            {
                @("Networks with more than 65534 hosts are not currently supported")
            }
        </div>

    </div>
</div>

@code {
    public List<IPAddress> NetworkInterfaceIPs { get; set; } = new();

    public List<IPAddress> Gateways { get; set; } = new();

    public List<IPAddress> LocalIPs { get; set; } = new();

    public List<DeviceModel> Devices { get; set; } = new();

    public string SelectedIp { get; set; } = null!;

    public bool Loading { get; set; }

    public bool Listening { get; set; }

    [CascadingParameter(Name = "SendFiles")]
    public List<FileModel> SendFiles { get; set; } = null!;

    [CascadingParameter(Name = "ReceivedFiles")]
    public List<FileModel> ReceivedFiles { get; set; } = null!;

    [CascadingParameter(Name = "SaveFolder")]
    public string? SaveFolder { get; set; }

    IJSObjectReference jsModule = null!;

    [CascadingParameter(Name = "MessageBox")]
    private MessageBox MessageBoxElement { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        Listening = TransferService.IsListening;

        TransferService.ListeningStarted += ListeningStarted;
        TransferService.ListeningStopped += ListeningStopped;

        lns.DeviceFound += OnDeviceFound;

        NetworkInterfaceIPs = nis.GetNetworkInterfaceIPAddresses();
        SelectedIp = NetworkInterfaceIPs.First().ToString();

        await lns.StartMulticastScanAsync(IPAddress.Parse(SelectedIp));
            }

    private void OnDeviceFound(object? sender, DeviceModel device)
    {
        Devices.Add(device);
        StateHasChanged();
        }

    private async Task IpChanged()
    {
        IPAddress ip = IPAddress.Parse(SelectedIp);
        await RefreshIps();
        }

    private async Task RefreshIps()
    {
        LocalIPs.Clear();
        Devices.Clear();
        await lns.StartMulticastScanAsync(IPAddress.Parse(SelectedIp));
    }

    private async Task StartListening()
    {
        if (SaveFolder is null)
        {
            MessageBoxElement.ShowError(
                "You need to select destination folder before receiving files.", 
                "Destination folder not selected");
            return;
        }

        if (SaveFolder is null)
        {
            MessageBoxElement.ShowError(
                "Saving to the selected folder is not currently supported. Please select another folder.",
                "Destination folder not supported");
            return;
        }

        await TransferService.StartListeningAsync();
    }

    private async Task StopListening()
    {
        await TransferService.StopListeningAsync();
    }

    private async Task StartSending(IPAddress ip)
    {
        if (SendFiles.Count == 0)
        {
            MessageBoxElement.ShowWarning("You have no files to send.");
            return;
        }

        await TransferService.StartSendingAsync(ip, SendFiles);
    }

    private void ListeningStarted(object? sender, EventArgs e)
    {
        Listening = true;
    }

    private void ListeningStopped(object? sender, EventArgs e)
    {
        Listening = false;
    }

    public void Dispose()
    {
        TransferService.ListeningStarted -= ListeningStarted;
        TransferService.ListeningStopped -= ListeningStopped;
    }
}
