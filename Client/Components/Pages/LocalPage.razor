@page "/local"
@using System.Net
@using System.Net.NetworkInformation
@using System.Net.Sockets
@using System.Text
@inject ILocalNetworkService lns
@inject IStorageService storage
@inject IJSRuntime js
@inject NavigationService NavigationService
@inject LocalTransferService TransferService
@implements IDisposable

<header class="header">
    <BadgeButton OnClick="@(() => NavigationService.NavigateTo("receivefiles"))"
                 Count="ReceivedFiles.Count">
        <i class="ph ph-download-simple"></i>
    </BadgeButton>
    <BadgeButton OnClick="@(() => NavigationService.NavigateTo("sendfiles"))"
                 Count="SendFiles.Count">
        <i class="ph ph-upload-simple"></i>
    </BadgeButton>
    <BadgeButton Class="left" OnClick="@(() => Listening ? StopListening() : StartListening())">
        @if (Listening)
        {
            <i class="ph ph-ear"></i>
        }
        else
        {
            <i class="ph ph-ear-slash"></i>
        }
    </BadgeButton>
</header>

<div class="main">
    <div class="container">
        <div class="top-panel">
            <select class="select" @bind="SelectedIp" @bind:after="IpChanged">
                @foreach (var ip in IPs)
                {
                    <option value="@ip" selected="@(ip.ToString() == SelectedIp)">@ip.ToString()</option>
                }
            </select>
            <div class="refresh" @onclick="RefreshIps">
                <i class="ph ph-arrows-clockwise"></i>
            </div>
        </div>

        @if (Supported)
        {
            <div class="devices">
                <div class="devices-area">
                    @foreach (var ip in LocalIPs)
                    {
                        <DeviceComponent Ip="@ip" SendCallback="StartSending"></DeviceComponent>
                    }
                </div>
            </div>
        }

        <div class="message">
            @if (IPs.Count == 0)
            {
                @("Could not find interfaces with default gateway")
            }
            else if (!Supported)
            {
                @("Networks with more than 65534 hosts are not currently supported")
            }
        </div>

    </div>
</div>

<MessageBox @ref="MessageBoxElement"></MessageBox>

@code {
    public List<IPAddress> IPs { get; set; } = new();

    public List<IPAddress> Gateways { get; set; } = new();

    public List<IPAddress> LocalIPs { get; set; } = new();

    public string? SelectedIp { get; set; }

    public bool Supported { get; set; }

    public bool Loading { get; set; }

    public bool Listening { get; set; }

    [CascadingParameter(Name = "SendFiles")]
    public List<FileModel> SendFiles { get; set; }

    [CascadingParameter(Name = "ReceivedFiles")]
    public List<FileModel> ReceivedFiles { get; set; }

    [CascadingParameter(Name = "SaveFolder")]
    public string? SaveFolder { get; set; }

    IJSObjectReference jsModule = null!;

    private MessageBox MessageBoxElement = null!;

    protected override async Task OnInitializedAsync()
    {
        Listening = TransferService.IsListening;
        TransferService.ListeningStarted += ListeningStarted;
        TransferService.ListeningStopped += ListeningStopped;
        // IPs = lns.GetAllHostIpAddressesWithGateway();
        // GetGateways();
        await Task.Run(async () =>
        {
            IPs = lns.GetAllHostIpAddressesWithGateway();
            GetGateways();
            // GetLocalIPs();
            var selectedIp = IPs
                .FirstOrDefault(ip => lns.GetSubnetMaskByIp(ip)?.GetAddressBytes().Count(b => b == 0) <= 2);
            Supported = selectedIp is null ? false : true;
            SelectedIp ??= selectedIp?.ToString();
            await PingLocalIPs(selectedIp);
        });
    }

    private void GetGateways()
    {
        foreach (var ip in IPs)
        {
            IPAddress? gateway = lns.GetGatewayByIp(ip);
            if (gateway is not null)
            {
                Gateways.Add(gateway);
            }
        }
    }

    // private void GetLocalIPs()
    // {
    //     foreach (var ip in IPs)
    //     {
    //         IPAddress? mask = lns.GetSubnetMaskByIp(ip);

    //         if (mask?.GetAddressBytes().Count(b => b == 0) > 1 ||
    //             mask is null)
    //             continue;

    //         if (mask is not null)
    //         {
    //             IPAddress network = lns.GetNetworkAddress(ip, mask);

    //             byte[] hosts = mask.GetAddressBytes().Select(b => (byte)(byte.MaxValue - b)).ToArray();

    //             byte[] init = new byte[4];
    //             while (!hosts.SequenceEqual(init))
    //             {
    //                 for (int i = 3; i >= 0; i--)
    //                 {
    //                     if (init[i]++ == 255) continue;
    //                     break;
    //                 }

    //                 var host = new IPAddress(network.GetAddressBytes().Zip(init, (n, i) => (byte)(n + i)).ToArray());

    //                 Ping p = new Ping();
    //                 p.PingCompleted += PingCompleted;
    //                 p.SendAsync(host, host);
    //             }
    //         }
    //     }
    // }

    // private void PingCompleted(object sender, PingCompletedEventArgs e)
    // {
    //     if (e.Reply != null &&
    //         e.Reply.Status == IPStatus.Success &&
    //         !IPs.Contains((IPAddress)e.UserState!) &&
    //         !Gateways.Contains((IPAddress)e.UserState!) &&
    //         !LocalIPs.Contains((IPAddress)e.UserState!))
    //     {
    //         LocalIPs.Add((IPAddress)e.UserState!);
    //         InvokeAsync(StateHasChanged);
    //     }
    // }

    private async Task PingLocalIPs(IPAddress? ip)
    {
        if (ip is null)
            return;

        IPAddress? mask = lns.GetSubnetMaskByIp(ip);

        if (mask is null || mask.GetAddressBytes().Count(b => b == 0) > 2)
            return;

        Loading = true;
        await InvokeAsync(StateHasChanged);

        IPAddress network = lns.GetNetworkAddress(ip, mask);

        byte[] hosts = mask.GetAddressBytes().Select(b => (byte)(byte.MaxValue - b)).ToArray();

        List<Task> pings = new List<Task>();

        byte[] init = new byte[4];
        while (!hosts.SequenceEqual(init))
        {
            for (int i = 3; i >= 0; i--)
            {
                if (init[i]++ == 255) continue;
                break;
            }

            var host = new IPAddress(network.GetAddressBytes().Zip(init, (n, i) => (byte)(n + i)).ToArray());

            // Task.Run(() => PingHost(host));
            pings.Add(PingHost(host));
            // PingHost(host);
        }

        await Task.WhenAll(pings);
        Loading = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task PingHost(IPAddress host)
    {
        Ping pingSender = new Ping();
        PingReply pr = await pingSender.SendPingAsync(host, 10_000);

        if (pr.Status == IPStatus.Success &&
            !IPs.Contains(pr.Address) &&
            !Gateways.Contains(pr.Address) &&
            !LocalIPs.Contains(pr.Address))
        {
            LocalIPs.Add(pr.Address);
            await InvokeAsync(StateHasChanged);
        }
    }

    private void IpChanged()
    {
        IPAddress? ip = SelectedIp is null ? null : IPAddress.Parse(SelectedIp);
        Supported = ip is null || lns.GetSubnetMaskByIp(ip)?.GetAddressBytes().Count(b => b == 0) > 2 ? false : true;
        if (Supported)
        {
            LocalIPs.Clear();
            Task.Run(() => PingLocalIPs(ip));
        }
    }

    private void RefreshIps()
    {
        IPAddress? ip = SelectedIp is null ? null : IPAddress.Parse(SelectedIp);
        LocalIPs.Clear();
        Task.Run(() => PingLocalIPs(ip));
    }

    private async Task StartListening()
    {
        try
        {
            await TransferService.StartListeningAsync();
        }
        catch (Exception ex)
        {
            MessageBoxElement.ShowError(ex.Message);
        }
    }

    private async Task StopListening()
    {
        try
        {
            await TransferService.StopListeningAsync();
        }
        catch (Exception ex)
        {
            MessageBoxElement.ShowError(ex.Message);
        }
    }

    private async Task StartSending(IPAddress ip)
    {
        try
        {
            await TransferService.StartSendingAsync(ip, SendFiles);
        }
        catch (Exception ex)
        {
            MessageBoxElement.ShowError(ex.Message);
        }
    }

    private void StopSending()
    {
        try
        {
            TransferService.StopSending();
        }
        catch (Exception ex)
        {
            MessageBoxElement.ShowError(ex.Message);
        }
    }

    private void ListeningStarted(object? sender, EventArgs e)
    {
        Listening = true;
    }

    private void ListeningStopped(object? sender, EventArgs e)
    {
        Listening = false;
    }

    public void Dispose()
    {
        TransferService.ListeningStarted -= ListeningStarted;
        TransferService.ListeningStopped -= ListeningStopped;
    }
}
