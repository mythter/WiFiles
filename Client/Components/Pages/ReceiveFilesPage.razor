@page "/receivefiles"
@using System.Net
@inject NavigationService NavigationService
@inject LocalTransferService TransferService
@inject IStorageService StorageService
@inject IJSRuntime js
@implements IDisposable

<header class="header">
    <RealButton OnClick="@PickFolder">
        <i class="ph ph-folder-notch"></i>
    </RealButton>
    @if (TransferService.IsReceiving)
    {
        <RealButton OnClick="@TransferService.StopReceiving">
            <i class="ph ph-x"></i>
        </RealButton>
    }
    <BadgeButton Class="transparent left" OnClick="@NavigationService.NavigateBack">
        <i class="ph ph-arrow-left"></i>
    </BadgeButton>
</header>

<div class="container">
    <div class="folder" @ref=ElementFolderContainer>
        <div class="folder-area" @ref=ElementFolder @onclick="@PickFolder">
            @StorageService.SaveFolder
        </div>
    </div>
    <div class="files">
        @foreach (var file in StorageService.ReceiveFiles)
        {
            <FileComponent File="@file"></FileComponent>
        }

        @if (StorageService.ReceiveFiles.Count == 0)
        {
            <div class="message">
                @("You haven't received any files yet")
            </div>
        }
    </div>
</div>

@code {
    [CascadingParameter(Name = "MessageBox")]
    public MessageBox MessageBoxElement { get; set; }

    IJSObjectReference jsModule;

    ElementReference ElementFolderContainer;
    ElementReference ElementFolder;

    protected override async Task OnInitializedAsync()
    {
        TransferService.ReceivingStopped += OnReceivingStopped;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsModule = await js.InvokeAsync<IJSObjectReference>("import", "/js/RunningTextAnimation.js");
            await jsModule.InvokeVoidAsync("RunningTextAnimation.Init", ElementFolderContainer, ElementFolder);
        }
    }

    private async Task PickFolder()
    {
        string? path = await StorageService.PickFolderAsync();

        if (path is null)
        {
            return;
        }

        if (!StorageService.CheckIfDirectoryWritable(path))
        {
            MessageBoxElement.ShowError(
                "Saving to the selected folder is not currently supported. Please select another folder.",
                "Destination folder not supported");
            return;
        }

        if (StorageService.TrySetSaveFolder(path))
        {
            StateHasChanged();
            await jsModule.InvokeVoidAsync("RunningTextAnimation.CheckAnimation", ElementFolder, ElementFolderContainer);
        }
    }

    private void OnReceivingStopped(object? sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        TransferService.ReceivingStopped -= OnReceivingStopped;
    }
}
