@page "/sendfiles"
@using System.Text
@inject NavigationService NavigationService
@inject IStorageService StorageService
@inject LocalTransferService TransferService

<header class="header">
    <BadgeButton OnClick="@PickFiles">
        <i class="ph ph-plus"></i>
    </BadgeButton>
    @if (SelectedFiles.Count > 0)
    {
        <BadgeButton OnClick="@RemoveFiles">
            <i class="ph ph-trash"></i>
        </BadgeButton>
    }
    <BadgeButton Class="transparent left" OnClick="NavigationService.NavigateBack">
        <i class="ph ph-arrow-left"></i>
    </BadgeButton>
</header>

<div class="files">
    @foreach (FileModel file in SendFiles)
    {
        <FileComponent @key="@file" File="@file" OnClick="OnFileClick"></FileComponent>
    }

    @if (SendFiles.Count == 0)
    {
        <div class="message">
            @("Select files you wand to send")
        </div>
    }
</div>

@code {
    [CascadingParameter(Name = "SendFiles")]
    public List<FileModel> SendFiles { get; set; }

    [CascadingParameter(Name = "MessageBox")]
    private MessageBox MessageBoxElement { get; set; }

    public List<FileModel> SelectedFiles { get; set; } = new();

    private async Task PickFiles()
    {
        if (TransferService.ReceiverIp is not null)
        {
            MessageBoxElement.ShowWarning("You can't add files to list while sending in progress.");
            return;
        }

        StringBuilder sb = new StringBuilder();
        List<string> files = await StorageService.PickFilesAsync();
        foreach (var filePath in files)
        {
            if (!StorageService.CheckIsFileReadable(filePath))
            {
                sb.AppendLine(filePath);
                continue;
            }

            if (!string.IsNullOrEmpty(filePath) &&
                !SendFiles.Any(f => f.Path == filePath))
            {
                long fileSize = new FileInfo(filePath).Length;
                FileModel file = new FileModel(filePath, fileSize);
                SendFiles.Add(file);
            }
        }

        if (sb.Length > 0)
        {
            MessageBoxElement.ShowError(
                "Some files you selected are not currently supported for sending:\n" +
                sb.ToString(),
                "Files not supported");
            return;
        }
    }

    private void RemoveFiles()
    {
        if (TransferService.ReceiverIp is not null)
        {
            MessageBoxElement.ShowWarning("You can't delete files from list while sending in progress.");
            return;
        }

        foreach (FileModel f in SelectedFiles)
        {
            SendFiles.Remove(f);
        }

        SelectedFiles.Clear();
    }

    private void OnFileClick(FileModel file)
    {
        if (SelectedFiles.Contains(file))
        {
            SelectedFiles.Remove(file);
        }
        else
        {
            SelectedFiles.Add(file);
        }
    }
}
