@using System.Net
@inherits LayoutComponentBase
@inject NavigationService NavigationService
@inject ILocalNetworkService lns
@inject IStorageService StorageService
@inject LocalTransferService TransferService

<CascadingValue Value="@MessageBoxElement" Name="MessageBox">
    <CascadingValue Value="@SaveFolder" Name="SaveFolder">
        <div class="page">
            <main class="main">
                @Body
            </main>
            @* <div class="menu">
                        <div class="item">
                        Local
                        </div>
                        <div class="item">
                        Global
                        </div>
                        </div> *@
        </div>
    </CascadingValue>
</CascadingValue>

<MessageBox @ref="MessageBoxElement"></MessageBox>

@code {
    public string? SaveFolder { get; set; }

    private MessageBox MessageBoxElement = null!;

    protected override async Task OnInitializedAsync()
    {
        // listening for the incoming requests while the app is running
        _ = lns.StartMulticastListeningAsync();

        TransferService.OnSendFilesRequest = ShowRequest;

        TransferService.SendingFinishedSuccessfully += OnSendingFinishedSuccessfully;

        TransferService.ReceivingFileStarted += AddReceivingFile;
        TransferService.ReceivingFileFailed += RemoveReceivingFile;
        TransferService.ReceivingFinishedSuccessfully += OnReceivingFinishedSuccessfully;

        TransferService.ExceptionHandled += ShowError;

        SaveFolder = StorageService.GetDefaultFolder();
        TransferService.SaveFolder = SaveFolder;

        NavigationService.NavigateTo("local");
    }

    private Task<bool> ShowRequest(IPAddress? sender, int filesCount)
    {
        return MessageBoxElement.ShowRequest(
            $"Sender with IP {sender} wants to send you {filesCount} file(s). Accept the request?",
             "Request to send files");
    }

    private void ShowError(object? sender, string message)
    {
        MessageBoxElement.ShowError(message);
    }

    private void OnReceivingFinishedSuccessfully(object? sender, EventArgs e)
    {
        MessageBoxElement.ShowInfo("All files received successfully.", "Receiving finished");
    }

    private void OnSendingFinishedSuccessfully(object? sender, EventArgs e)
    {
        MessageBoxElement.ShowInfo("All files sent successfully.", "Sending finished");
    }

    private void OnSetFolder(string path)
    {
        SaveFolder = path;
        TransferService.SaveFolder = path;
    }

    private void AddReceivingFile(object? sender, FileModel file)
    {
        StorageService.ReceivedFiles.Add(file);
        InvokeAsync(StateHasChanged);
    }

    private void RemoveReceivingFile(object? sender, string filePath)
    {
        for (int i = 0; i < StorageService.ReceivedFiles.Count; i++)
        {
            if (StorageService.ReceivedFiles[i].Path == filePath)
            {
                StorageService.ReceivedFiles.Remove(StorageService.ReceivedFiles[i]);
            }
        }
        InvokeAsync(StateHasChanged);
    }
}
