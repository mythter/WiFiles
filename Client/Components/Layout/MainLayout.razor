@using System.Net
@inherits LayoutComponentBase
@inject NavigationService NavigationService
@inject NavigationManager NavigationManager
@inject ILocalNetworkService lns
@inject IStorageService StorageService
@inject LocalTransferService TransferService

<CascadingValue Value="@MessageBoxElement" Name="MessageBox">
    <div class="page">
        <main class="main">
            @Body
        </main>

        @if (NavigationManager.Uri.Contains("/local") ||
             NavigationManager.Uri.Contains("/global"))
        {   
            <div class="menu">
                    <div class="nav">
                        <input type="checkbox"> 
                            <i class="ph ph-x icon"></i>
                            <i class="ph ph-list icon"></i>
                        <div class="items"> 
                            <li class="@(NavigationManager.Uri.Contains("/local") ? "active" : "")"
                     @onclick="@(() => NavigationService.NavigateTo("local"))">
                                <i class="ph ph-house-line"></i>
                                LOCAL
                                </li> 
                            <li class="@(NavigationManager.Uri.Contains("/global") ? "active" : "")"
                                @onclick="@(() => NavigationService.NavigateTo("global"))">
                                <i class="ph ph-globe-hemisphere-west"></i>
                                GLOBAL
                            </li> 
                </div>
                <div class="item @(NavigationManager.Uri.Contains("/global") ? "active" : "")"
                     @onclick="@(() => NavigationService.NavigateTo("global"))">
                    Global
                </div>
            </div>
        }
    </div>
</CascadingValue>

<MessageBox @ref="MessageBoxElement"></MessageBox>

@code {

    private MessageBox MessageBoxElement = null!;

    protected override async Task OnInitializedAsync()
    {
        // listening for the incoming requests while the app is running
        _ = lns.StartMulticastListeningAsync();

        TransferService.OnSendFilesRequest = ShowRequest;

        TransferService.SendingFinishedSuccessfully += OnSendingFinishedSuccessfully;

        TransferService.ReceivingFileStarted += AddReceivingFile;
        TransferService.ReceivingFileFailed += RemoveReceivingFile;
        TransferService.ReceivingFinishedSuccessfully += OnReceivingFinishedSuccessfully;

        TransferService.ExceptionHandled += ShowError;

        NavigationService.NavigateTo("local");
    }

    private Task<bool> ShowRequest(LocalRequestModel request)
    {
        return MessageBoxElement.ShowRequest(
            $"Sender with IP {request.Sender.IP} wants to send you {request.Files.Count} file(s). Accept the request?",
             "Request to send files");
    }

    private void ShowError(object? sender, string message)
    {
        MessageBoxElement.ShowError(message);
    }

    private void OnReceivingFinishedSuccessfully(object? sender, EventArgs e)
    {
        MessageBoxElement.ShowInfo("All files received successfully.", "Receiving finished");
    }

    private void OnSendingFinishedSuccessfully(object? sender, EventArgs e)
    {
        MessageBoxElement.ShowInfo("All files sent successfully.", "Sending finished");
    }

    private void AddReceivingFile(object? sender, FileModel file)
    {
        StorageService.ReceiveFiles.Add(file);
        InvokeAsync(StateHasChanged);
    }

    private void RemoveReceivingFile(object? sender, string filePath)
    {
        for (int i = StorageService.ReceiveFiles.Count - 1; i >= 0; i--)
        {
            if (StorageService.ReceiveFiles[i].Path == filePath)
            {
                StorageService.ReceiveFiles.Remove(StorageService.ReceiveFiles[i]);
                break;
            }
        }
        InvokeAsync(StateHasChanged);
    }
}
